<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd  
                        http://www.springframework.org/schema/context  
                        http://www.springframework.org/schema/context/spring-context-3.1.xsd  
                        http://www.springframework.org/schema/mvc  
                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">




	<!-- 启动注解 -->
	<mvc:annotation-driven />
	<!--SpringMVC 登录拦截器 -->
	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/**" />
			<bean class="com.library.system.handlerInterceptor.LoginHandlerInterceptor" />
		</mvc:interceptor>
	</mvc:interceptors>


	<context:component-scan base-package="com.library.system.*" />


	<!--避免IE执行AJAX时，返回JSON出现下载文件 -->
	<bean id="mappingJacksonHttpMessageConverter"
		class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/html;charset=UTF-8</value>
			</list>
		</property>
	</bean>
	<!-- 规定项目通过注解的方式接受前台请求 -->
	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="mappingJacksonHttpMessageConverter" />	<!-- JSON转换器 -->
			</list>
		</property>
	</bean>
	<!-- 定义跳转的文件的前后缀 ，视图模式配置 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址 -->
		<property name="prefix" value="/WEB-INF/view/" />
		<property name="suffix" value=".html" />
	</bean>

	<!-- 配置文件上传，如果没有使用文件上传可以不用配置，当然如果不配，那么配置文件中也不必引入上传组件包 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- 默认编码 -->
		<property name="defaultEncoding" value="utf-8" />
		<!-- 文件大小最大值 -->
		<property name="maxUploadSize" value="10485760000" />
		<!-- 内存中的最大值 -->
		<property name="maxInMemorySize" value="40960" />
	</bean>



	<!-- 手动配置Springmvc注解驱动 -->
	<bean
		class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping" />

	<!-- 启动Spring MVC的注解功能,设置编码方式，防止乱码 -->
	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<bean
					class="org.springframework.http.converter.ByteArrayHttpMessageConverter" />
				<bean
					class="org.springframework.http.converter.StringHttpMessageConverter">
					<property name="supportedMediaTypes" value="text/plain;charset=UTF-8" />
				</bean>
				<bean
					class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
					<property name="supportedMediaTypes">
						<list>
							<value>text/html;charset=UTF-8</value>
						</list>
					</property>
				</bean>
			</list>
		</property>
	</bean>

	<!-- 线程池的配置 -->
	<bean id="taskExecutor"
		class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<!-- 线程池维护线程的最少数量 -->
		<property name="corePoolSize" value="1" />
		<!-- 最大线程数 -->
		<property name="maxPoolSize" value="10" />
		<!-- 队列最大长度 -->
		<property name="queueCapacity" value="100" />
		<!-- 线程池维护线程所允许的空闲时间，默认为60s -->
		<property name="keepAliveSeconds" value="60" />
	</bean>


	<!-- 使用quartz框架做简单的作业调度（定时器） -->

<!-- demo1 start -->
					<!--要调度的对象 -->
					<bean id="jobBean" class="com.library.system.quartz.QuartzTest" />
					<!-- 定义调用对象和调用对象的方法 -->
					<bean id="jobDetail"
						class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
						<property name="targetObject" ref="jobBean" />
						<property name="targetMethod" value="execute" />
						<!--将并发设置为false -->
						<property name="concurrent" value="false" />
					</bean>
					<!-- 定义触发时间 -->
					<bean id="trigger"
						class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
						<property name="jobDetail" ref="jobDetail" />
						<!--表达式，我的是每天凌晨1点执行一次 -->
						<property name="cronExpression" value="*/1 * * * * ?" />
						<!-- <property name="cronExpression" value="0/10 * * * * ?" /> -->
					</bean>

<!-- demo1 start end -->



<!-- demo2 start -->
					<bean id="jobBean2" class="com.library.system.quartz.QuartzTest2" />
					<!-- 定义调用对象和调用对象的方法 -->
					<bean id="jobDetail2"
						class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
						<property name="targetObject" ref="jobBean2" />
						<property name="targetMethod" value="execute" />
						<!--将并发设置为false -->
						<property name="concurrent" value="false" />
					</bean>
					<!-- 定义触发时间 -->
					<bean id="trigger2"
						class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
						<property name="jobDetail" ref="jobDetail2" />
						<!--表达式，我的是每天凌晨1点执行一次 -->
						<property name="cronExpression" value="*/5 * * * * ?" />
						<!-- <property name="cronExpression" value="0/10 * * * * ?" /> -->
					</bean>
<!-- demo2 start end -->

	<!-- 总管理类如果将lazy-init='false'那么容器启动就会执行调度程序 -->
	<bean id="startQuertz"
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean"
		lazy-init="false">
		<property name="triggers">
			<list>
				<!--作业调度器,list下可加入其他的调度器 -->
				<ref bean="trigger" />
				<ref bean="trigger2" />
			</list>
		</property>
	</bean>


</beans>